library n_image_picker_view;

import 'dart:async';

import 'package:flutter/material.dart';

import 'image_body.dart';
import 'image_controller.dart';

class ImagePicker extends ImageBody {
  ImagePicker({
    required super.controller,
    required super.width,
    required super.height,
    super.onTap,
    super.onLoadingImage,
    super.filterOpacity,
    super.emptyWidget,
    super.filledWidget,
    super.onErrorWidget,
    super.onLoadingWidget,
    super.margin,
    super.backgroundColor,
    super.borderRadius,
    super.border,
    super.shadow,
    super.readOnly,
    super.fit,
    super.viewerBlur,
    super.viewerBlurSigma,
    super.previewBlur,
    super.previewBlurSigma,
    super.shape,
    super.tag,
    super.duration,
    super.closeColor,
    super.maxSize,
    super.key,
  });

  factory ImagePicker.square({
    required ImageController controller,
    Future<void> Function()? onTap,
    String? onLoadingImage,
    double? dimension,
    double? filterOpacity,
    Widget? emptyWidget,
    Widget? filledWidget,
    Widget? onErrorWidget,
    Widget? onLoadingWidget,
    EdgeInsetsGeometry? margin,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Border? border,
    BoxShadow? shadow,
    bool? readOnly,
    BoxFit? fit,
    bool? viewerBlur,
    double? viewerBlurSigma,
    bool? previewBlur,
    double? previewBlurSigma,
    Duration? duration,
    Color? closeColor,
    Object? tag,
    int? maxSize,
  }) =>
      ImagePicker(
        controller: controller,
        onTap: onTap,
        onLoadingImage: onLoadingImage,
        width: dimension ?? 250,
        height: dimension ?? 250,
        filterOpacity: filterOpacity ?? 0.2,
        emptyWidget: emptyWidget,
        filledWidget: filledWidget,
        onErrorWidget: onErrorWidget,
        onLoadingWidget: onLoadingWidget,
        margin: margin,
        backgroundColor: backgroundColor,
        borderRadius: borderRadius,
        border: border,
        shadow: shadow,
        readOnly: readOnly,
        fit: fit ?? BoxFit.cover,
        viewerBlur: viewerBlur,
        viewerBlurSigma: viewerBlurSigma,
        previewBlur: previewBlur,
        previewBlurSigma: previewBlurSigma,
        shape: BoxShape.rectangle,
        tag: tag,
        duration: duration ?? Duration(milliseconds: 250),
        closeColor: closeColor,
        maxSize: maxSize,
      );

  factory ImagePicker.circle({
    required ImageController controller,
    Future<void> Function()? onTap,
    String? onLoadingImage,
    double? dimension,
    double? filterOpacity,
    Widget? emptyWidget,
    Widget? filledWidget,
    Widget? onErrorWidget,
    Widget? onLoadingWidget,
    EdgeInsetsGeometry? margin,
    Color? backgroundColor,
    Border? border,
    BoxShadow? shadow,
    bool? readOnly,
    BoxFit? fit,
    bool? viewerBlur,
    double? viewerBlurSigma,
    bool? previewBlur,
    double? previewBlurSigma,
    Object? tag,
    Duration? duration,
    Color? closeColor,
    int? maxSize,
  }) =>
      ImagePicker(
        controller: controller,
        onTap: onTap,
        onLoadingImage: onLoadingImage,
        width: dimension ?? 250,
        height: dimension ?? 250,
        filterOpacity: filterOpacity ?? 0.2,
        emptyWidget: emptyWidget,
        filledWidget: filledWidget,
        onErrorWidget: onErrorWidget,
        onLoadingWidget: onLoadingWidget,
        margin: margin,
        backgroundColor: backgroundColor,
        border: border,
        shadow: shadow,
        readOnly: readOnly,
        fit: fit ?? BoxFit.cover,
        viewerBlur: viewerBlur,
        viewerBlurSigma: viewerBlurSigma,
        previewBlur: previewBlur,
        previewBlurSigma: previewBlurSigma,
        shape: BoxShape.circle,
        tag: tag,
        duration: duration ?? Duration(milliseconds: 250),
        closeColor: closeColor,
        maxSize: maxSize,
      );

  factory ImagePicker.expand({
    required ImageController controller,
    Future<void> Function()? onTap,
    String? onLoadingImage,
    double? filterOpacity,
    Widget? emptyWidget,
    Widget? filledWidget,
    Widget? onErrorWidget,
    Widget? onLoadingWidget,
    EdgeInsetsGeometry? margin,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Border? border,
    BoxShadow? shadow,
    bool? readOnly,
    BoxFit? fit,
    bool? viewerBlur,
    double? viewerBlurSigma,
    bool? previewBlur,
    double? previewBlurSigma,
    Object? tag,
    Duration? duration,
    Color? closeColor,
    int? maxSize,
  }) =>
      ImagePicker(
        controller: controller,
        onTap: onTap,
        onLoadingImage: onLoadingImage,
        width: double.infinity,
        height: double.infinity,
        filterOpacity: filterOpacity ?? 0.2,
        emptyWidget: emptyWidget,
        filledWidget: filledWidget,
        onErrorWidget: onErrorWidget,
        onLoadingWidget: onLoadingWidget,
        margin: margin,
        backgroundColor: backgroundColor,
        borderRadius: borderRadius,
        border: border,
        shadow: shadow,
        readOnly: readOnly,
        fit: fit ?? BoxFit.cover,
        viewerBlur: viewerBlur,
        viewerBlurSigma: viewerBlurSigma,
        previewBlur: previewBlur,
        previewBlurSigma: previewBlurSigma,
        shape: BoxShape.rectangle,
        tag: tag,
        duration: duration ?? Duration(milliseconds: 250),
        closeColor: closeColor,
        maxSize: maxSize,
      );
}
