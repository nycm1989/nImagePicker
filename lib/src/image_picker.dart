library n_image_picker_view;

import 'package:flutter/material.dart';
import 'image_body.dart' show ImageBody;

class ImagePicker extends ImageBody {
  ImagePicker({
    required super.controller,
    required super.width,
    required super.height,
    super.onAdd,
    super.onDelete,
    super.urlImage,
    super.assetImage,
    super.emptyWidget,
    super.onErrorWidget,
    super.onLoadingWidget,
    super.backgroundColor,
    super.borderRadius,
    super.border,
    super.shadow,
    final EdgeInsetsGeometry ? margin,
    final bool               ? readOnly,
    final BoxFit             ? fit,
    final bool               ? viewerBlur,
    final double             ? viewerBlurSigma,
    super.tag,
    super.duration,
    super.closeColor,
    super.maxSize,
    super.headers,
    super.key,
    super.uploadIcon,
    super.deleteIcon,
    super.expandIcon,
    super.errorIcon,
    super.dragIcon,
  }) :
  assert( urlImage == null || assetImage == null, "Only one image must be provided" ),
  super(
    margin          : margin           ?? EdgeInsets.zero,
    readOnly        : readOnly         ?? false,
    fit             : fit              ?? BoxFit.cover,
    viewerBlur      : viewerBlur       ?? true,
    viewerBlurSigma : viewerBlurSigma  ?? 5.0,
    shape           : BoxShape.rectangle,
  );

  ImagePicker.square({
    required super.controller,
    required double dimension,
    super.onAdd,
    super.onDelete,
    super.urlImage,
    super.assetImage,
    super.emptyWidget,
    super.onErrorWidget,
    super.onLoadingWidget,
    super.backgroundColor,
    super.borderRadius,
    super.border,
    super.shadow,
    final EdgeInsetsGeometry ? margin,
    final bool               ? readOnly,
    final BoxFit             ? fit,
    final bool               ? viewerBlur,
    final double             ? viewerBlurSigma,
    super.tag,
    super.duration,
    super.closeColor,
    super.maxSize,
    super.headers,
    super.key,
    super.uploadIcon,
    super.deleteIcon,
    super.expandIcon,
    super.errorIcon,
    super.dragIcon,
  }) :
  assert( urlImage == null || assetImage == null, "Only one image must be provided" ),
  super(
    width           : dimension,
    height          : dimension,
    margin          : margin           ?? EdgeInsets.zero,
    readOnly        : readOnly         ?? false,
    fit             : fit              ?? BoxFit.cover,
    viewerBlur      : viewerBlur       ?? true,
    viewerBlurSigma : viewerBlurSigma  ?? 5.0,
    shape           : BoxShape.rectangle,
  );

  ImagePicker.circle({
    required super.controller,
    required double dimension,
    super.onAdd,
    super.onDelete,
    super.urlImage,
    super.assetImage,
    super.emptyWidget,
    super.onErrorWidget,
    super.onLoadingWidget,
    super.backgroundColor,
    super.borderRadius,
    super.border,
    super.shadow,
    final EdgeInsetsGeometry ? margin,
    final bool               ? readOnly,
    final BoxFit             ? fit,
    final bool               ? viewerBlur,
    final double             ? viewerBlurSigma,
    super.tag,
    super.duration,
    super.closeColor,
    super.maxSize,
    super.headers,
    super.key,
    super.uploadIcon,
    super.deleteIcon,
    super.expandIcon,
    super.errorIcon,
    super.dragIcon,
  }) :
  assert( urlImage == null || assetImage == null, "Only one image must be provided" ),
  super(
    width           : dimension,
    height          : dimension,
    margin          : margin           ?? EdgeInsets.zero,
    readOnly        : readOnly         ?? false,
    fit             : fit              ?? BoxFit.cover,
    viewerBlur      : viewerBlur       ?? true,
    viewerBlurSigma : viewerBlurSigma  ?? 5.0,
    shape           : BoxShape.circle,
  );

  ImagePicker.expand({
    required super.controller,
    super.onAdd,
    super.onDelete,
    super.urlImage,
    super.assetImage,
    super.emptyWidget,
    super.onErrorWidget,
    super.onLoadingWidget,
    super.backgroundColor,
    super.borderRadius,
    super.border,
    super.shadow,
    final EdgeInsetsGeometry ? margin,
    final bool               ? readOnly,
    final BoxFit             ? fit,
    final bool               ? viewerBlur,
    final double             ? viewerBlurSigma,
    super.tag,
    super.duration,
    super.closeColor,
    super.maxSize,
    super.headers,
    super.key,
    super.deleteIcon,
    super.expandIcon,
    super.errorIcon,
    super.dragIcon,
  }) :
  assert( urlImage == null || assetImage == null, "Only one image must be provided" ),
  super(
    width           : double.infinity,
    height          : double.infinity,
    margin          : margin           ?? EdgeInsets.zero,
    readOnly        : readOnly         ?? false,
    fit             : fit              ?? BoxFit.cover,
    viewerBlur      : viewerBlur       ?? true,
    viewerBlurSigma : viewerBlurSigma  ?? 5.0,
    shape           : BoxShape.rectangle,
  );
}
